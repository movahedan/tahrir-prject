{"map":"{\"version\":3,\"sources\":[\"/home/smp/workspace/projects/tahrir-prject/client/node_modules/file-loader/dist/cjs.js??ref--6-oneOf-7!/home/smp/workspace/projects/tahrir-prject/client/src/logo.svg\",\"/home/smp/workspace/projects/tahrir-prject/client/src/App.js\",\"/home/smp/workspace/projects/tahrir-prject/client/src/serviceWorker.js\",\"/home/smp/workspace/projects/tahrir-prject/client/src/index.js\"],\"names\":[\"module\",\"exports\",\"__webpack_require__\",\"p\",\"App\",\"state\",\"axios\",\"url\",\"method\",\"res\",\"this\",\"setState\",\"data\",\"console\",\"log\",\"_context\",\"t0\",\"react_default\",\"a\",\"createElement\",\"className\",\"src\",\"logo\",\"alt\",\"question_text\",\"React\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"defaults\",\"xsrfCookieName\",\"xsrfHeaderName\",\"baseURL\",\"interceptors\",\"request\",\"use\",\"config\",\"token\",\"localStorage\",\"getItem\",\"headers\",\"concat\",\"error\",\"Promise\",\"reject\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qSCoCzBC,oNA7BbC,MAAQ,6NAIcC,GAAAA,CAAM,CACtBC,IAAK,yDACLC,OAAQ,eAFJC,SAKNC,KAAKC,SAAS,CAACC,KAAMH,EAAIG,uDAEzBC,QAAQC,IAARC,EAAAC,gJAMF,OADAH,QAAQC,IAAIJ,KAAKL,OAEfY,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,SAAA,CAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,MAAA,CAAKE,IAAKC,EAAAA,EAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,KAAA,MACCT,KAAKL,MAAMO,KAAOF,KAAKL,MAAMO,KAAK,GAAGY,cAAgB,cAvB9CC,EAAAA,EAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNzB,EAAAA,EAAM0B,SAASC,eAAiB,YAChC3B,EAAAA,EAAM0B,SAASE,eAAiB,cAChC5B,EAAAA,EAAM0B,SAASG,QAAU,wBACzB7B,EAAAA,EAAM8B,aAAaC,QAAQC,IAAI,SAACC,GAC9B,IAAIC,EAAQC,aAAaC,QAAQ,iBAIjC,OAHIF,IACFD,EAAOI,QAAP,cAAA,UAAAC,OAA6CJ,IAExCD,GACN,SAACM,GACF,OAAOC,QAAQC,OAAOF,KAGxBG,EAAAA,EAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD6G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"module.exports = __webpack_public_path__ + \\\"static/media/logo.5d5d9eef.svg\\\";\",\"import React from 'react';\\nimport axios from 'axios';\\n\\nimport logo from './logo.svg';\\nimport './App.css';\\n\\nclass App extends React.Component {\\n  state = {}\\n  \\n  async componentDidMount() {\\n    try {\\n      const res = await axios({\\n        url: 'http://localhost:8000/api/polls/questions/?format=json',\\n        method: \\\"get\\\"\\n      });\\n\\n      this.setState({data: res.data})\\n    } catch (error) {\\n      console.log(error)\\n    }\\n  }\\n\\n  render() {\\n    console.log(this.state)\\n    return (\\n      <div className=\\\"App\\\">\\n        <header className=\\\"App-header\\\">\\n          <img src={logo} className=\\\"App-logo\\\" alt=\\\"logo\\\" />\\n          <br />\\n          {this.state.data ? this.state.data[0].question_text : null}\\n        </header>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport axios from 'axios';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\naxios.defaults.xsrfCookieName = \\\"csrftoken\\\";\\naxios.defaults.xsrfHeaderName = \\\"X-CSRFToken\\\";\\naxios.defaults.baseURL = 'http://localhost:8000';\\naxios.interceptors.request.use((config) => {\\n  let token = localStorage.getItem('_kAZ%U0.token');\\n  if (token) {\\n    config.headers['Authorization'] = `Bearer ${ token }`;\\n  }\\n  return config;\\n}, (error) => {\\n  return Promise.reject(error);\\n});\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{18:function(e,t,a){e.exports=a.p+\"static/media/logo.5d5d9eef.svg\"},21:function(e,t,a){e.exports=a(47)},44:function(e,t,a){},46:function(e,t,a){},47:function(e,t,a){\"use strict\";a.r(t);var n=a(1),o=a.n(n),r=a(13),s=a.n(r),c=a(2),i=a.n(c),l=(a(44),a(3)),u=a.n(l),p=a(14),d=a(15),h=a(16),f=a(19),m=a(17),v=a(20),g=a(18),w=a.n(g),k=(a(46),function(e){function t(){var e,a;Object(d.a)(this,t);for(var n=arguments.length,o=new Array(n),r=0;r<n;r++)o[r]=arguments[r];return(a=Object(f.a)(this,(e=Object(m.a)(t)).call.apply(e,[this].concat(o)))).state={},a}return Object(v.a)(t,e),Object(h.a)(t,[{key:\"componentDidMount\",value:function(){var e=Object(p.a)(u.a.mark(function e(){var t;return u.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,i()({url:\"http://localhost:8000/api/polls/questions/?format=json\",method:\"get\"});case 3:t=e.sent,this.setState({data:t.data}),e.next=10;break;case 7:e.prev=7,e.t0=e.catch(0),console.log(e.t0);case 10:case\"end\":return e.stop()}},e,this,[[0,7]])}));return function(){return e.apply(this,arguments)}}()},{key:\"render\",value:function(){return console.log(this.state),o.a.createElement(\"div\",{className:\"App\"},o.a.createElement(\"header\",{className:\"App-header\"},o.a.createElement(\"img\",{src:w.a,className:\"App-logo\",alt:\"logo\"}),o.a.createElement(\"br\",null),this.state.data?this.state.data[0].question_text:null))}}]),t}(o.a.Component));Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));i.a.defaults.xsrfCookieName=\"csrftoken\",i.a.defaults.xsrfHeaderName=\"X-CSRFToken\",i.a.defaults.baseURL=\"http://localhost:8000\",i.a.interceptors.request.use(function(e){var t=localStorage.getItem(\"_kAZ%U0.token\");return t&&(e.headers.Authorization=\"Bearer \".concat(t)),e},function(e){return Promise.reject(e)}),s.a.render(o.a.createElement(k,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[21,1,2]]]);","extractedComments":[]}